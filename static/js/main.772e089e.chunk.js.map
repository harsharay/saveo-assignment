{"version":3,"sources":["dummyData.js","Components/Home/Home.js","constants.js","App.js","reportWebVitals.js","index.js"],"names":["dummyMarkedLocations","name","position","lat","lng","require","config","GoogleApiWrapper","apiKey","process","props","useState","allMarkedLocations","setAllMarkedLocations","allMarkedLatLng","setAllMarkedLatLng","clickRoute","setClickRoute","currentIndex","setCurrentIndex","locationName","input","setInput","long","useEffect","console","log","handleInputChange","e","target","value","prev","className","type","onChange","onClick","currentState","alert","map","item","index","google","initialCenter","zoom","t","coord","latLng","currentLat","currentLng","getLocationURL","replace","String","fetch","then","data","json","plus_code","compound_code","cityName","split","substr","indexOf","marker","length","path","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.772e089e.chunk.js","sourcesContent":["export const dummyMarkedLocations = [{\r\n    name: \"----\",\r\n    position: {\r\n        lat: \"----\",\r\n        lng: \"----\"\r\n    }\r\n},\r\n{\r\n    name: \"----\",\r\n    position: {\r\n        lat: \"----\",\r\n        lng: \"----\"\r\n    }\r\n},\r\n{\r\n    name: \"----\",\r\n    position: {\r\n        lat: \"----\",\r\n        lng: \"----\"\r\n    }\r\n},\r\n{\r\n    name: \"----\",\r\n    position: {\r\n        lat: \"----\",\r\n        lng: \"----\"\r\n    }\r\n},\r\n{\r\n    name: \"----\",\r\n    position: {\r\n        lat: \"----\",\r\n        lng: \"----\"\r\n    }\r\n}]","import React, { useState, useEffect } from \"react\";\r\nimport {Map, InfoWindow, Marker, GoogleApiWrapper, Polygon, Polyline} from 'google-maps-react';\r\n// import { withGoogleMap, GoogleMap, DirectionsRenderer } from 'react-google-maps';\r\nimport { dummyMarkedLocations } from \"../../dummyData\"\r\nimport { GET_LOCATION } from \"../../constants\"\r\n\r\n\r\nimport \"./Home.css\"\r\nrequire('dotenv').config()\r\n\r\nconst Home = (props) => {\r\n\r\n    const [allMarkedLocations, setAllMarkedLocations] = useState(dummyMarkedLocations) \r\n    const [allMarkedLatLng, setAllMarkedLatLng] = useState([])\r\n\r\n    const [clickRoute, setClickRoute] = useState(false)\r\n\r\n    const [currentIndex, setCurrentIndex] = useState(0)\r\n\r\n    const [input, setInput] = useState({\r\n        locationName: \"\",\r\n        lat: \"\",\r\n        lng: \"\"\r\n    })\r\n\r\n    const [currentMarker, setCurrentMarker] = useState({\r\n        lat: \"\",\r\n        long: \"\"\r\n    })\r\n\r\n    useEffect(() => console.log(process.env),[])\r\n\r\n    const handleInputChange = e => {\r\n        let name = e.target.name\r\n        let value = e.target.value\r\n\r\n        setInput(prev => {\r\n            return {\r\n                ...prev,\r\n                [name] : value\r\n            }\r\n        })\r\n    }\r\n\r\n    const handleAddMarkers = () => {\r\n        console.log(40)\r\n        if(currentIndex < 5){\r\n            const { locationName, lat, lng } = input\r\n            let currentState = allMarkedLocations\r\n            console.log(65,currentIndex)\r\n            currentState[currentIndex] = {\r\n                name: locationName,\r\n                position: {\r\n                    lat,\r\n                    lng\r\n                }\r\n            }\r\n\r\n            setAllMarkedLocations(currentState)\r\n            setCurrentIndex(currentIndex+1)\r\n\r\n            setAllMarkedLatLng(prev => {\r\n                return [\r\n                    ...prev,\r\n                    {\r\n                        lat,\r\n                        lng\r\n                    }\r\n                ]\r\n            })\r\n        }else {\r\n            alert(\"Limit is 5\")\r\n        }\r\n    }\r\n    \r\n\r\n    const handleClick = (t, map, coord) => {\r\n        const { latLng } = coord;\r\n        const currentLat = latLng.lat();\r\n        const currentLng = latLng.lng();\r\n\r\n        let getLocationURL = GET_LOCATION.replace(\"__LATLONG__\",String(latLng.lat())+\",\"+String(latLng.lng()))\r\n        getLocationURL = getLocationURL.replace(\"__APIKEY__\", process.env.REACT_APP_API_KEY)\r\n        \r\n        fetch(getLocationURL)\r\n        .then(data => data.json())\r\n        .then(json => {\r\n            console.log(json.plus_code.compound_code)\r\n            if(json.plus_code.compound_code){\r\n                let cityName = json.plus_code.compound_code.split(\",\")[0]\r\n                cityName = cityName.substr(cityName.indexOf(\" \")+1)\r\n\r\n                setInput(prev => {\r\n                    return {\r\n                        ...prev,\r\n                        locationName: cityName,\r\n                        lat: currentLat,\r\n                        lng: currentLng\r\n                    }\r\n                })\r\n            } else {\r\n                alert(\"select another place\")\r\n            }\r\n        })     \r\n    }\r\n    \r\n    const handleShowRoute = () => {\r\n        setClickRoute(true)\r\n    }\r\n\r\n    return (\r\n        <div className=\"home-root\">\r\n            <div className=\"content-group\">\r\n                <div className=\"top-block\">\r\n                    <div className=\"top-block-content\">\r\n                        <div>\r\n                            <p>Location Name</p>\r\n                            <input type=\"text\" name=\"locationName\" value={input.locationName} onChange={handleInputChange} />\r\n                        </div>\r\n                        <div>\r\n                            <p>Enter Latitude</p>\r\n                            <input type=\"text\" name=\"lat\" value={input.lat} onChange={handleInputChange} />\r\n                        </div>\r\n                        <div>\r\n                            <p>Enter Longitude</p>\r\n                            <input type=\"text\" name=\"lng\" value={input.lng} onChange={handleInputChange} />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"top-block-button-block\">\r\n                        <button className=\"top-block-button\" onClick={handleAddMarkers}>Add</button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"bottom-group\">\r\n                    <div className=\"display-coordinates\">\r\n                        <p>All Coordinates</p>\r\n                        <div className=\"display-coordinates-content\">\r\n                            <div className=\"header-group\">\r\n                                <p>My coordinates</p>\r\n                                <p>Default</p>\r\n                                <p>Default</p>\r\n                            </div>\r\n                            <div className=\"locations-data\">\r\n                                {allMarkedLocations.map((item, index) => {\r\n                                    return (\r\n                                        <div key={index} className=\"header-group\">\r\n                                            <p>{index+1}. {item.name}</p>\r\n                                            <p>{item.position.lat}</p>\r\n                                            <p>{item.position.lng}</p>\r\n                                        </div>\r\n                                    )\r\n                                })} \r\n                            </div>\r\n                            <button onClick={handleShowRoute}>Show Route</button>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"map1\">\r\n                        <Map\r\n                            google={props.google}\r\n                            initialCenter={{\r\n                                lat: 17.380275415679968,\r\n                                lng: 78.48421990628647 \r\n                            }}\r\n                            className=\"actualMap\"\r\n                            zoom={5}\r\n                            onClick={handleClick}\r\n                        >\r\n                        {allMarkedLocations.map((marker, index) => (\r\n                            <Marker\r\n                            key={index}\r\n                            position={marker.position}\r\n                            />\r\n                        ))}\r\n                        {(clickRoute && allMarkedLatLng.length>0) && <Polyline\r\n                            path={allMarkedLatLng}\r\n                            strokeColor=\"#000000\"\r\n                            strokeOpacity={1}\r\n                            strokeWeight={5}\r\n                            fillColor=\"#000000\"\r\n                            fillOpacity={0.35} \r\n                        />}\r\n                        </Map>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GoogleApiWrapper({apiKey: process.env.REACT_APP_API_KEY })(Home)","export const GET_LOCATION = \"https://maps.googleapis.com/maps/api/geocode/json?latlng=__LATLONG__&sensor=true&key=__APIKEY__\"","import React from \"react\"\nimport './App.css';\nimport Home from \"./Components/Home/Home\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}